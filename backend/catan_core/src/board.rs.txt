use rand::seq::SliceRandom;

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Resource {
    Lumber,
    Brick,
    Wheat,
    Sheep,
    Ore,
    Desert
}

#[derive(Debug, Clone)]
pub struct Tile {
    pub resource: Resource,
    pub number: Option<u8>, // None for Desert
    pub adjacent_tiles: Vec<usize>
}

#[derive(Debug)]
pub struct Board {
    pub tiles: Vec<Tile>,
}

impl Board {
    pub fn generate() -> Self{
        let mut tiles = Vec::with_capacity(19);

        let adjacency_map = [
            vec![1, 3, 4],       // Tile 0 (top left)
            vec![0, 2, 4, 5],    // Tile 1
            vec![1, 5, 6],       // Tile 2 (top right)
            vec![0, 4, 7, 8],    // Tile 3
            vec![0, 1, 3, 5, 8, 9], // Tile 4
            vec![1, 2, 4, 6, 9, 10], // Tile 5
            vec![2, 5, 10, 11],  // Tile 6
            vec![3, 8, 12],      // Tile 7 (middle left)
            vec![3, 4, 7, 9, 12, 13], // Tile 8
            vec![4, 5, 8, 10, 13, 14], // Tile 9
            vec![5, 6, 9, 11, 14, 15], // Tile 10
            vec![6, 10, 15],     // Tile 11 (middle right)
            vec![7, 8, 13, 16],  // Tile 12
            vec![8, 9, 12, 14, 16, 17], // Tile 13
            vec![9, 10, 13, 15, 17, 18], // Tile 14
            vec![10, 11, 14, 18], // Tile 15
            vec![12, 13, 17],    // Tile 16 (bottom left)
            vec![13, 14, 16, 18], // Tile 17
            vec![14, 15, 17]     // Tile 18 (bottom right)
        ];

        for (idx, adjacent) in adjacency_map.iter().enumerate(){
            tiles.push(Tile { resource: Resource::Desert, number: None, adjacent_tiles: adjacent.clone() });
        }
        Board {tiles}
    }

    fn generate_valid_board(&mut self)-> bool{
        self.distribute_resources();

        let desert_index = self.tiles.iter().position(|t| t.resource == Resource::Desert).unwrap();

        let mut numbers = vec![2,3,3,4,4,5,5,6,6,7,8,8,9,9,10,10,11,11,12];
        numbers.shuffle(&mut rand::thread_rng());

        self.place_numbers_backtracking(0, &numbers, desert_index)
    }

    fn distribute_resources(&mut self){
        let mut resources = vec![
            Resource::Lumber, Resource::Lumber, Resource::Lumber, Resource::Lumber,
            Resource::Brick, Resource::Brick, Resource::Brick,
            Resource::Sheep, Resource::Sheep, Resource::Sheep, Resource::Sheep,
            Resource::Wheat, Resource::Wheat, Resource::Wheat, Resource::Wheat,
            Resource::Ore, Resource::Ore, Resource::Ore,
            Resource::Desert
        ];

        resources.shuffle(&mut rand::thread_rng());

        for (idx, resource) in resources.into_iter().enumerate(){
            self.tiles[idx].resource = resource;
        }
    }

    fn place_numbers_backtracking(&mut self, tile_idx: usize, available_numbers: &[u8], desert_idx: usize)-> bool {
        if tile_idx >= self.tiles.len(){
            return true;
        }
        if tile_idx == desert_idx || self.tiles[tile_idx].number.is_some(){
            return self.place_numbers_backtracking(tile_idx+1, available_numbers, desert_idx);
        }

        for &num in available_numbers{
            if self.is_valid_number_placement(tile_idx, num){
                self.tiles[tile_idx].number = Some(num);
            }

            let new_available = available_numbers.iter()
                .filter(|&&n| n != num)
                .copied()
                .collect::<Vec<_>>();

            if self.place_numbers_backtracking(tile_idx +1, &new_available, desert_idx){
                return  true;
            }

            self.tiles[tile_idx].number = None;
        }

        false
    }

    fn is_valid_number_placement(&self, tile_idx: usize, number: u8)-> bool{
        for &adj_idx in &self.tiles[tile_idx].adjacent_tiles{
            if let Some(adj_num) = self.tiles[adj_idx].number{
                if adj_num == number{
                    return false;
                }

                if (number == 6 || number == 8) && (adj_num ==6 || adj_num == 8){
                    return false;
                }

                if (number == 2 || number == 12) && (adj_num == 2 || adj_num ==12){
                    return false;
                }
            }
        }
        
        true
    }
}